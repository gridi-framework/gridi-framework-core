/**
 * Check if the type of variable is a sass map.
 *
 * @function
 * @param {map} - sass map
 * @return boolean
 */
@function is-map($map){
    @return type-of($map) == 'map';
}

/**
 * Reverses the map.
 *
 * @function
 * @param {map} - sass map
 * @return map
 */
@function map-reverse($map) {
    $result: null;

    @if type-of($map) == "map" {
        $keys: map-keys($map);
        $map-reversed: ();

        @for $i from length($keys) through 1 {
            $map-reversed: map-merge(
                $map-reversed,
                (nth($keys, $i): map-get($map, nth($keys, $i)))
            );
        }

        @if type-of($map-reversed) == "map" {
            $result: $map-reversed;
        } @else {
            @warn 'There was an error reversing the order of "#{$map}"';
        }
    } @else {
        @warn '"#{$map}" is not a valid map';
    }

    @return $result;
}

/**
 * Fetch a deep value in a multi-level map. Works much like map-get() except that you pass multiple keys as the second parameter to go down multiple levels in the nested list.
 * Example:
 * $map: (
 *     one: (
 *         val: 1,
 *         two: (
 *             val: 2,
 *             three: three_val
 *         )
 *     ),
 *     foo: "foo",
 *     bar: "bar"
 * );
 *
 * map-fetch($test, one two three) return three_val
 *
 * @function
 * @param {map} - sass map
 * @param {keys} - sass list of keys
 * @return map
 */
@function map-fetch($map, $keys) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

/**
 * Set or update a deep nested value in map.
 * Example:
 * $map: (
 *     one: (
 *         val: 1,
 *         two: (
 *             val: 2,
 *             three: three_val
 *         )
 *     ),
 *     foo: "foo",
 *     bar: "bar"
 * );
 *
 * $map = map-set($test, one two three, three_new_val) return:
 *
 * $map: (
 *     one: (
 *         val: 1,
 *         two: (
 *             val: 2,
 *             three: three_new_val
 *         )
 *     ),
 *     foo: "foo",
 *     bar: "bar"
 * );
 *
 * @function
 * @param {map} - sass map
 * @param {keys} - sass list of keys
 * @param {value} - mixed
 * @return map
 */
@function map-set($map, $keys, $value) {
    $maps: ($map,);
    $result: null;

    @if type-of(nth($keys, -1)) == "map" {
        @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
    }

    @if length($keys) == 1 {
        @return map-merge($map, ($keys: $value));
    }

    @for $i from 1 through length($keys) - 1 {
        $current-key: nth($keys, $i);
        $current-map: nth($maps, -1);
        $current-get: map-get($current-map, $current-key);
        @if $current-get == null {
            @error "Key `#{$key}` doesn't exist at current level in map.";
        }
        $maps: append($maps, $current-get);
    }

    @for $i from length($maps) through 1 {
        $current-map: nth($maps, $i);
        $current-key: nth($keys, $i);
        $current-val: if($i == length($maps), $value, $result);
        $result: map-merge($current-map, ($current-key: $current-val));
    }

    @return $result;
}

/**
 * Return parsed map parsed by two maps
 * Example:
 * $keys-map: (
 *     foo: "foo-value-key",
 *     bar: "bar-value-key"
 * );
 *
 * $values-map: (
 *     foo-value-key: "foo-value",
 *     bar-value-key: "bar-value"
 * );
 *
 * $map = parse-map($keys-map, $values-map) return:
 *
 * $map: (
 *     foo: "foo-value",
 *     bar: "bar-value"
 * );
 *
 * @function
 * @param {keys-map} - sass map
 * @param {values-map} - sass map
 * @return map
 */
@function parse-map($keys-map, $values-map) {
    $return-map: ();

    @each $key, $value-key in $keys-map {
        $return-map: map-set($return-map, $key, map_get($values-map, $value-key));
    }

    @return $return-map;
}
